# 1. Sirve para abrir una ventana y mostrar la dirrecion de algun archivo
file.choose()
read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Café Dataframe.csv"
read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Café Dataframe.csv")
# 1. Sirve para abrir una ventana y mostrar la dirrecion de algun archivo
file.choose()
read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Café Dataframe.csv")
Cafe_df<- read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Café Dataframe.csv")
# 2. Con estas instrucciones podemos personalizar la grafica
plot(x=Cafe_df$Area..ha., y=Cafe_df$Rendimiento..ha.ton.
,cex= 1
,pch=18
,col= "#69b3a2"
,xlab= "Area(ha)"
,ylab = "Rendimiento(ha/ton)"
,main = 'Area vs Rendimiento')
data('mtcars')
Ejemplo_1 <- mtcars[ , c(1,3:6)]
plot(data , pch=20 , cex=1.5 , col="#69b3a2")
plot(data , pch=20 , cex=1.5 , col="#69b3a2")
Mapa_Calor <- as.matrix(mtcars)
heatmap(Mapa_Calor)
# 6. Graficas animadas
library(gganimate)
library(gifski)
library(gapminder)
gapminder %>%
group_by(year,continent) %>%
summarise(mean_life = mean(lifeExp)) %>%
ggplot(aes(x = year,
y = mean_life,
color= continent)) +
geom_line()+
transition_reveal(year)
gapminder %>%
group_by(year,continent) %>%
summarise(mean_life = mean(lifeExp)) %>%
ggplot(aes(x = year,
y = mean_life,
color= continent)) +
geom_line()+
transition_reveal(year)
library(gifski)
library(gapminder)
# 6. Graficas animadas
library(gganimate)
gapminder %>%
group_by(year,continent) %>%
summarise(mean_life = mean(lifeExp)) %>%
ggplot(aes(x = year,
y = mean_life,
color= continent)) +
geom_line()+
transition_reveal(year)
# 5. Filtrar datos con la libreria dplyr
library(gapminder)
library(dplyr)
data("gapminder")
gapminder %>%
group_by(year,continent) %>%
summarise(mean_life = mean(lifeExp)) %>%
ggplot(aes(x = year,
y = mean_life,
color= continent)) +
geom_line()+
transition_reveal(year)
####################################################
##################################################
# para mejorar la presentaci?n y lectura de los graficos
### install.packages("hexbin") # solo se instala UNA VEZ
# cargar las funciones de la libreria
require(hexbin)
# tambien puedes usar:  library(hexbin)
# se crea el objeto bin con la relaci?n de las dos variables
bin1<-hexbin(cafe_df$Produccion..ton.,cafe_df$Rendimiento..ha.ton., xbins=10)
plot(bin1)
########
bin2<-hexbin(cafe_df$Area.Nacional..ha.,cafe_df$Rendimiento..ha.ton., xbins=10)
plot(bin2)
##################
# Recordar que para leer un dataframe ya creado se utiliza
#X_df <- read.table(url, header=T)
# Tambi?n puede indicarle la ruta y par?metros de la siguiente forma
#datos<-read.csv(files="./carpeta/archivo.csv", header = TRUE, sep=",", dec=".")
# tambi?n, puedes leer el dataframe del directorio as?:
#datos_df<-read.csv("./carpeta/archivo.csv")
#mi projecto esta en el directorio mis documentos/PROYECTO_R_ANALISIS_CAFE
#cafe_df<-read.csv("./produccioncafe.csv", header = TRUE, sep=",", dec=".")
#DATOS<-read_excel("./PRODUCCIONe.xlsx", header =TRUE)
cafe_df<-read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Caf? Dataframe.csv", header = TRUE, sep=",", dec=".")
##################
# Recordar que para leer un dataframe ya creado se utiliza
#X_df <- read.table(url, header=T)
# Tambi?n puede indicarle la ruta y par?metros de la siguiente forma
#datos<-read.csv(files="./carpeta/archivo.csv", header = TRUE, sep=",", dec=".")
# tambi?n, puedes leer el dataframe del directorio as?:
#datos_df<-read.csv("./carpeta/archivo.csv")
#mi projecto esta en el directorio mis documentos/PROYECTO_R_ANALISIS_CAFE
#cafe_df<-read.csv("./produccioncafe.csv", header = TRUE, sep=",", dec=".")
#DATOS<-read_excel("./PRODUCCIONe.xlsx", header =TRUE)
cafe_df<-read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Caf? Dataframe.csv", header = TRUE, sep=",", dec=".")
##################
# Recordar que para leer un dataframe ya creado se utiliza
#X_df <- read.table(url, header=T)
# Tambi?n puede indicarle la ruta y par?metros de la siguiente forma
#datos<-read.csv(files="./carpeta/archivo.csv", header = TRUE, sep=",", dec=".")
# tambi?n, puedes leer el dataframe del directorio as?:
#datos_df<-read.csv("./carpeta/archivo.csv")
#mi projecto esta en el directorio mis documentos/PROYECTO_R_ANALISIS_CAFE
#cafe_df<-read.csv("./produccioncafe.csv", header = TRUE, sep=",", dec=".")
#DATOS<-read_excel("./PRODUCCIONe.xlsx", header =TRUE)
cafe_df<-read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Café Dataframe.csv", header = TRUE, sep=",", dec=".")
cafe_df
# tambien puedes usar:  library(hexbin)
# se crea el objeto bin con la relaci?n de las dos variables
bin1<-hexbin(cafe_df$Produccion..ton.,cafe_df$Rendimiento..ha.ton., xbins=10)
plot(bin1)
########
bin2<-hexbin(cafe_df$Area.Nacional..ha.,cafe_df$Rendimiento..ha.ton., xbins=10)
plot(bin2)
##################
# hallar la correlacion entre las variables por correlacion de pearson
# indicamos que utiliza las variables con valores descartando los valores nulos que existan
cor(cafe_df$Area.Nacional..ha.,cafe_df$Rendimiento..ha.ton., use="complete.obs")
#####################
# Una forma de calcular la moda es utilizando funciones
# calcular la moda para la variable Rendimiento
# en el dataframe Cafe
cafe_df
table(cafe_df$Rendimiento..ha.ton.)
moda=function(var){
frec.var<-table(var)
valor=which(frec.var==max(frec.var)) #Elemento con el valor
names(valor)}
names(valor)}
# ahora se llama a la funci?n para que entregue el valor
moda(cafe_df$Rendimiento..ha.ton.)
##############################################################
###############   MODELO DE REGRESION LINEAL EN R ############
#############################################################
#############################################################
#############################################################
### LIBRERIAS para crear Modelo de regresion lineal en R
# REcuerde, que se instalan una (1) vez (INSTALL), luego solo requiere llamar(LIBRARY)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("boot")
library(boot)
#install.packages("car")
library(car)
#install.packages("QuantPsyc")
library(QuantPsyc)
#install.packages("ggplot2")
library(ggplot2)
########################################################
# construccion del modelo de regresion lineal, variable de entrada Area Nacional, Variable Salida Produc Nal
# CREAMOS EL MODELO DE REGRESI?N LINEAL - PRODUC. NACIONAL VERSUS AREA NACIONAL
modelo_regresion_lineal=lm( Produccion.Nacional..ton.~ Area.Nacional..ha.,data=cafe_df, na.action=na.exclude)
#####################################
#####################################
# A continuaci?n se describen los par?metros del modelo anterior
summary(modelo_regresion_lineal)
######################################
# Construcci?n de la gr?fica Area Nal. versus Prod. Nacional
Grafica_AreaNal_ProdNal_1=ggplot(cafe_df, aes(x = Area.Nacional..ha., y = Produccion.Nacional..ton., color ="red")) +
geom_point()
# a continuacion se despliega la grafica dispersion Area Nacional Versus Prod. Nac.
Grafica_AreaNal_ProdNal_1
##########################################
##########################################
# MODELO DE REGRESION LINEAL - Area Nacional versus Producci?n Nacional
# Ahora se representa de dispersion con el modelo de regresi?n lineal en color azul
# la linea recta de color azul representa el modelo.
Grafica_AreaNal_ProdNal_1 + geom_point()+geom_smooth(method="lm", colour ="Blue")
View(gapminder)
gapminder %>%
group_by(year,continent) %>%
summarise(mean_life = mean(lifeExp)) %>%
ggplot(aes(x = year,
y = mean_life,
color= continent)) +
geom_line()+
transition_reveal(year)
################
# Histograma: Produccion Nacional
ggplot(cafe_df) +
geom_histogram(aes(x = Produccion.Nacional..ton., color="red"))
gapminder %>%
group_by(Produccion.Nacional..ton.,Area.Nacional..ha.) %>%
summarise(mean_life = mean(lifeExp)) %>%
ggplot(aes(x = Produccion_Nacional,
y = mean_life,
color= Area_nacional)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
cafe_df
cafe_df %>%
group_by(Produccion.Nacional..ton.,Area.Nacional..ha.) %>%
summarise(mean_life = mean(lifeExp)) %>%
ggplot(aes(x = Produccion_Nacional,
y = mean_life,
color= Area_nacional)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
View(cafe_df)
cafe_df %>%
group_by(Produccion.Nacional..ton.,Area.Nacional..ha.) %>%
summarise(Year = mean(ï..Anio)) %>%
ggplot(aes(x = Produccion_Nacional,
y = mean_life,
color= Area_nacional)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
cafe_df %>%
group_by(Produccion.Nacional..ton., Area.Nacional..ha.) %>%
summarise(Year = mean(ï..Anio)) %>%
ggplot(aes(x = Produccion_Nacional,
y = mean_life,
color= Area_nacional)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
# 2. Con estas instrucciones podemos personalizar la grafica
plot(x=Cafe_df$Area..ha., y=Cafe_df$Rendimiento..ha.ton.
,cex= 1
,pch=18
,col= "#69b3a2"
,xlab= "Area(ha)"
,ylab = "Rendimiento(ha/ton)"
,main = 'Area vs Rendimiento')
cafe_df %>%
group_by(Produccion.Nacional..ton., Area.Nacional..ha.) %>%
summarise(Year = mean(ï..Anio)) %>%
ggplot(aes(x = Produccion_Nacional,
y = mean_life,
color= Area_nacional)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
cafe_df %>%
group_by(Produccion.Nacional..ton., Area.Nacional..ha.) %>%
summarise(Year = mean(ï..Anio)) %>%
ggplot(aes(x = Produccion_Nacional..ha.,
y = ï..Anio,
color= Area_nacional)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
cafe_df %>%
group_by(Produccion.Nacional..ton., Area.Nacional..ha.) %>%
summarise(Year = mean(ï..Anio)) %>%
ggplot(aes(x =Produccion_Nacional..ha.,
y =ï..Anio,
color= Area_nacional)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
cafe_df %>%
group_by(Produccion.Nacional..ton., Area.Nacional..ha.) %>%
summarise(Year = mean(ï..Anio)) %>%
ggplot(aes(x =Produccion_Nacional..ha.,
y =ï..Anio,
color= Area_nacional)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
cafe_df %>%
group_by(Produccion.Nacional..ton., Area.Nacional..ha.) %>%
summarise(Year = mean(ï..Anio)) %>%
ggplot(aes(x =Produccion.Nacional..ton.,
y =ï..Anio,
color= Area.Nacional..ha.)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
cafe_df %>%
group_by(Produccion.Nacional..ton., Area.Nacional..ha.) %>%
summarise(Year = mean(ï..Anio)) %>%
ggplot(aes(x = Produccion.Nacional..ton.,
y = ï..Anio,
color= Area.Nacional..ha.)) +
geom_line()+
transition_reveal(Produccion.Nacional..ton.)
##################
# Recordar que para leer un dataframe ya creado se utiliza
#X_df <- read.table(url, header=T)
# Tambi?n puede indicarle la ruta y par?metros de la siguiente forma
#datos<-read.csv(files="./carpeta/archivo.csv", header = TRUE, sep=",", dec=".")
# tambi?n, puedes leer el dataframe del directorio as?:
#datos_df<-read.csv("./carpeta/archivo.csv")
#mi projecto esta en el directorio mis documentos/PROYECTO_R_ANALISIS_CAFE
#cafe_df<-read.csv("./produccioncafe.csv", header = TRUE, sep=",", dec=".")
#DATOS<-read_excel("./PRODUCCIONe.xlsx", header =TRUE)
cafe_df<-read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Café Dataframe.csv", header = TRUE, sep=",", dec=".")
cafe_df
# ahora el mismo grafico pero con detalles
plot(cafe_df$Rendimiento..ha.ton., main ="Grafico Dispersion",
sub ="CANTIDAD",
type ="p", # p indica puntos de dispersion
col ="red",
xlab ="cantidad",
ylab = "Rendimiento (ha/ton)")
#############
plot(cafe_df$Rendimiento..ha.ton., main ="Grafico Dispersion",
sub ="Indices",
type ="b", # b indica lineas uniendo los puntos de dispersion
col ="red",
xlab ="cantidad",
ylab = "Rendimiento (ha/ton)")
##################
# Recordar que para leer un dataframe ya creado se utiliza
#X_df <- read.table(url, header=T)
# Tambien puede indicarle la ruta y parametros de la siguiente forma
#datos<-read.csv(files="./carpeta/archivo.csv", header = TRUE, sep=",", dec=".")
# tambien, puedes leer el dataframe del directorio asi:
#datos_df<-read.csv("./carpeta/archivo.csv")
#mi projecto esta en el directorio mis documentos/PROYECTO_R_ANALISIS_CAFE
#cafe_df<-read.csv("./produccioncafe.csv", header = TRUE, sep=",", dec=".")
#DATOS<-read_excel("./PRODUCCIONe.xlsx", header =TRUE)
read.csv("C:\\Users\\Janus\\Desktop\\Archivos para subir a Github\\Produccion Café Dataframe.csv", header = TRUE, sep=",", dec=".")
library(markdown)
